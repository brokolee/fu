package EA2;

public class Ringpuffer {

    private Entry header = new Entry(null, null, null);
    private Entry helper;
    
    private int size;

    public Ringpuffer(int size) {
        header.next = header;
        header.previous = header;
        Entry tail = header;
        this.size = size;
        for (int i = 0; i < size; i++) {
            addLast();
        }

        for (int i = 0; i < size; i++) {
            tail = tail.previous;
        }

        header.previous.next = tail;
        helper = tail;

    }

    public void addLast() {
        Entry newEntry = new Entry(null, header, header.previous);
        header.previous.next = newEntry;
        header.previous = newEntry;

    }

    public String getLast() {
        if (size == 0)
            throw new java.util.NoSuchElementException();
        return header.previous.element;
    }

    public void insert(String text) {
        helper = header.previous;
        helper.element = text;
        helper = helper.previous;
    }

    public void print() {
       helper = header;
        for (int i = 0; i < size; i++) {
            System.out.println("i= " + i + "   " + helper.previous.element);
            helper = helper.previous;

        }
    }

    public int size() {
        return size;
    }

    private class Entry {
        private String element;
        private Entry next;
        private Entry previous;

        private Entry(String element, Entry next, Entry previous) {
            this.element = element;
            this.next = next;
            this.previous = previous;

        }

    }

    public class ListIterator {
        private int nextIndex = 0;
        private Entry next = header.next;

        public boolean hasNext() {
            return nextIndex != size;
        }

        /* calls itself and returns every element in the list */
        public String next() {
            if (nextIndex == size)
                throw new java.util.NoSuchElementException();
            String elem = next.element;
            next = next.next;
            nextIndex++;
            return elem;
        }

    }

    public ListIterator listIterator() {
        return new ListIterator();
    }

}

/*
 * public String removeLast() { Entry lastEntry = header.previous; if (lastEntry == header) throw new
 * java.util.NoSuchElementException(); lastEntry.previous.next = tail; lastEntry.next.previous = lastEntry.previous;
 * size--; return lastEntry.element; }
 */
